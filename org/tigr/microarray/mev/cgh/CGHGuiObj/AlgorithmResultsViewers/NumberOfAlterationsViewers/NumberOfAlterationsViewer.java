/*
 * NumberOfAlterationsViewer.java
 *
 * Created on May 19, 2003, 4:18 AM
 */

package org.tigr.microarray.mev.cgh.CGHGuiObj.AlgorithmResultsViewers.NumberOfAlterationsViewers;

import java.awt.BorderLayout;
import java.awt.image.BufferedImage;
import java.util.EventObject;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import org.tigr.microarray.mev.MultipleArrayData;
import org.tigr.microarray.mev.cgh.CGHDataObj.ICGHDataRegion;
import org.tigr.microarray.mev.cgh.CGHGuiObj.GuiUtil.GenomeBrowserLauncher;
import org.tigr.microarray.mev.cgh.CGHListenerObj.IDataRegionSelectionListener;
import org.tigr.microarray.mev.cgh.CGHUtil.TableDataWriter;
import org.tigr.microarray.mev.cluster.gui.Experiment;
import org.tigr.microarray.mev.cluster.gui.ICGHDisplayMenu;
import org.tigr.microarray.mev.cluster.gui.IData;
import org.tigr.microarray.mev.cluster.gui.IDisplayMenu;
import org.tigr.microarray.mev.cluster.gui.IFramework;
import org.tigr.microarray.mev.cluster.gui.IViewer;

/**
 *
 * @author  Adam Margolin
 * @author Raktim Sinha
 */

public class NumberOfAlterationsViewer extends javax.swing.JPanel implements IViewer{
    NumberOfAlterationsDataModel dataModel;
    JTable resultsTable = new JTable();

    Vector listeners = new Vector();
    //CGHMultipleArrayDataFcd fcd;
    IData data;

    /** Creates new form NumberOfAlterationsViewer */
    public NumberOfAlterationsViewer() {
        initComponents();
        initCustomComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        menubar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        itmSave = new javax.swing.JMenuItem();
        mnuAnnotations = new javax.swing.JMenu();
        itmAnnotateSelected = new javax.swing.JMenuItem();
        mnuLinks = new javax.swing.JMenu();
        btnEnsembl = new javax.swing.JMenuItem();
        btnGoldenPath = new javax.swing.JMenuItem();
        btnNcbi = new javax.swing.JMenuItem();

        mnuFile.setText("File");
        itmSave.setText("Save");
        itmSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmSaveActionPerformed(evt);
            }
        });

        mnuFile.add(itmSave);
        menubar.add(mnuFile);
        mnuAnnotations.setText("Annotations");
        itmAnnotateSelected.setText("Annotate Selected");
        itmAnnotateSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmAnnotateSelectedActionPerformed(evt);
            }
        });

        mnuAnnotations.add(itmAnnotateSelected);
        menubar.add(mnuAnnotations);
        mnuLinks.setText("Links");
        btnEnsembl.setText("Ensembl");
        btnEnsembl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnsemblActionPerformed(evt);
            }
        });

        mnuLinks.add(btnEnsembl);
        btnGoldenPath.setText("Golden Path");
        btnGoldenPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoldenPathActionPerformed(evt);
            }
        });
        mnuLinks.add(btnGoldenPath);

        btnNcbi.setText("NCBI");
        btnNcbi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNCBIActionPerformed(evt);
            }
        });
        mnuLinks.add(btnNcbi);

        menubar.add(mnuLinks);

        setLayout(new java.awt.BorderLayout());

    }//GEN-END:initComponents


    private void btnNCBIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoldenPathActionPerformed
        // Add your handling code here:
        int[] selectedRow = resultsTable.getSelectedRows();

        if(selectedRow.length != 0){
            ICGHDataRegion[] dataRegions = dataModel.getDataRegionAt(selectedRow);
            GenomeBrowserLauncher.launchNCBIMapViewer(dataRegions, data.getCGHSpecies());
        }
    }//GEN-LAST:event_btnGoldenPathActionPerformed

    private void btnGoldenPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoldenPathActionPerformed
        // Add your handling code here:
        int selectedRow = resultsTable.getSelectedRow();
        if(selectedRow != -1){
            ICGHDataRegion dataRegion = dataModel.getDataRegionAt(selectedRow);
            GenomeBrowserLauncher.launchGoldenPath(dataRegion, data.getCGHSpecies());
        }
    }//GEN-LAST:event_btnGoldenPathActionPerformed

    private void btnEnsemblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnsemblActionPerformed
        // Add your handling code here:
        int selectedRow = resultsTable.getSelectedRow();
        if(selectedRow != -1){
            ICGHDataRegion dataRegion = dataModel.getDataRegionAt(selectedRow);
            GenomeBrowserLauncher.launchEnsembl(dataRegion, data.getCGHSpecies());
        }
    }//GEN-LAST:event_btnEnsemblActionPerformed

    private void itmSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmSaveActionPerformed
        // Add your handling code here:
        TableDataWriter writer = new TableDataWriter();
        writer.writeTable(dataModel);
    }//GEN-LAST:event_itmSaveActionPerformed

    private void itmAnnotateSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmAnnotateSelectedActionPerformed
        // Add your handling code here:
        //ICGHDataRegion[] AnnotationRegions = new AnnotationRegion[fcd.getData().getNumChromosomes()];
        Vector[] vecAnnotationRegions = new Vector[data.getNumChromosomes()];
        for(int i = 0; i < vecAnnotationRegions.length; i++){
            vecAnnotationRegions[i] = new Vector();
        }

        int[] selectedRows = resultsTable.getSelectedRows();

        for(int i = 0; i < selectedRows.length; i++){
            ICGHDataRegion dataRegion = dataModel.getDataRegionAt(selectedRows[i]);
            int chromosomeIndex = dataRegion.getChromosomeIndex();
            vecAnnotationRegions[chromosomeIndex].add(dataRegion);
        }

        //ICGHDataRegion[][] annotationRegions = new ICGHDataRegion[fcd.getData().getNumChromosomes()][];
        ICGHDataRegion[][] annotationRegions = new ICGHDataRegion[data.getNumChromosomes()][];
        for(int i = 0; i < annotationRegions.length; i++){
            Vector chromRegions = vecAnnotationRegions[i];
            annotationRegions[i] = new ICGHDataRegion[chromRegions.size()];
            for(int j = 0; j < chromRegions.size(); j++){
                annotationRegions[i][j] = (ICGHDataRegion)chromRegions.get(j);
            }
        }

        ((MultipleArrayData)data).setAnnotations(annotationRegions);
        fireAnnotationsSelected(new EventObject(annotationRegions));

    }//GEN-LAST:event_itmAnnotateSelectedActionPerformed

    private void fireAnnotationsSelected(EventObject eventObject){
        Iterator it = listeners.iterator();
        while(it.hasNext()){
            Object obj = it.next();
            if(obj instanceof IDataRegionSelectionListener){
                ((IDataRegionSelectionListener)obj).onAnnotationsSelected(eventObject);
            }
        }
    }

    private void initCustomComponents(){
        setLayout(new BorderLayout());
        JScrollPane scrResults = new JScrollPane();
        scrResults.setViewportView(resultsTable);
        add(scrResults, BorderLayout.CENTER);

    }

    /** Returns a component to be inserted into scroll pane view port.
     */
    public JComponent getContentComponent() {
        return this;
    }

    /** Returns a component to be inserted into scroll pane header.
     */
    public JComponent getHeaderComponent() {
        return menubar;
    }

    /** Invoked by the framework to save or to print viewer image.
     */
    public BufferedImage getImage() {
        return null;
    }

    /** Invoked when the framework is going to be closed.
     */
    public void onClosed() {
    }

    /** Invoked by the framework when data is changed,
     * if this viewer is selected.
     * @see IData
     */
    public void onDataChanged(IData data) {
    }

    /** Invoked by the framework when this viewer was deselected.
     */
    public void onDeselected() {
    }

    /** Invoked by the framework when display menu is changed,
     * if this viewer is selected.
     * @see IDisplayMenu
     */
    public void onMenuChanged(IDisplayMenu menu) {
    }

    public void onMenuChanged(ICGHDisplayMenu menu) {
    }

    /** Invoked by the framework when this viewer is selected.
     */
    public void onSelected(IFramework framework) {
    }

    public void onThresholdsChanged(ICGHDisplayMenu menu) {
    }

    /** Getter for property dataModel.
     * @return Value of property dataModel.
     */
    public NumberOfAlterationsDataModel getDataModel() {
        return dataModel;
    }

    /** Setter for property dataModel.
     * @param dataModel New value of property dataModel.
     */
    public void setDataModel(NumberOfAlterationsDataModel dataModel) {
        this.dataModel = dataModel;
        resultsTable.setModel(dataModel);
    }

    /** Getter for property fcd.
     * @return Value of property fcd.

    public CGHMultipleArrayDataFcd getFcd() {
        return fcd;
    }
    */

    public IData getData() {
    	return data;
    }
    /** Setter for property fcd.
     * @param fcd New value of property fcd.

    public void setFcd(CGHMultipleArrayDataFcd fcd) {
        this.fcd = fcd;
    }
    */

    public void setData(IData dat){
    	data = dat;
    }
    public void addDrsListener(IDataRegionSelectionListener listener){
        this.listeners.add(listener);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu mnuAnnotations;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JMenu mnuLinks;
    private javax.swing.JMenuItem btnEnsembl;
    private javax.swing.JMenuItem btnGoldenPath;
    private javax.swing.JMenuItem btnNcbi;
    private javax.swing.JMenuItem itmSave;
    private javax.swing.JMenuItem itmAnnotateSelected;
    private javax.swing.JMenu mnuFile;
    // End of variables declaration//GEN-END:variables

	public JComponent getRowHeaderComponent() {
		// TODO Auto-generated method stub
		return null;
	}

	public JComponent getCornerComponent(int cornerIndex) {
		// TODO Auto-generated method stub
		return null;
	}

	public int[][] getClusters() {
		// TODO Auto-generated method stub
		return null;
	}

	public Experiment getExperiment() {
		// TODO Auto-generated method stub
		return null;
	}

	public int getViewerType() {
		// TODO Auto-generated method stub
		return 0;
	}

}
