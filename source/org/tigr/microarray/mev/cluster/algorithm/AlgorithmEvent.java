/*******************************************************************************
 * Copyright (c) 1999-2005 The Institute for Genomic Research (TIGR).
 * Copyright (c) 2005-2008, the Dana-Farber Cancer Institute (DFCI), 
 * J. Craig Venter Institute (JCVI) and the University of Washington.
 * All rights reserved.
 *******************************************************************************/
/*
 * $RCSfile: AlgorithmEvent.java,v $
 * $Revision: 1.4 $
 * $Date: 2006-02-23 21:19:42 $
 * $Author: caliente $
 * $State: Exp $
 */
package org.tigr.microarray.mev.cluster.algorithm;

import java.util.EventObject;

/**
 * This high-level event is generated by an algorithm when the algorithm-specific
 * action occurs (for example, calculation progress was changed).
 * The event is passed to every <code>AlgorithmListener</code> object
 * that registered to receive such events using the algorithm's
 * <code>addAlgorithmListener</code> method.
 *
 * @version 1.0
 * @author Aleksey D.Rezantsev
 */
public class AlgorithmEvent extends EventObject {
    
    /**
     * This event id indicates that algorithm sends progress units.
     */
    public static final int SET_UNITS      = 1;
    
    /**
     * This event id indicates that progress value was changed.
     */
    public static final int PROGRESS_VALUE = 2;
    
    /**
     * This event id indicates that monitor value was changed.
     */
    public static final int MONITOR_VALUE  = 3;
    
    /**
     * This event id indicates that algorithm sends a warning.
     */
    public static final int WARNING        = 4;
    
    public static final int SET_VALUE = 5;
    
    private int id;
    private int intValue;
    private float floatValue;
    private String description;
    
    /**
     * Constructs an <code>AlgorithmEvent</code> object.
     *
     * @param source  the object that originated the event.
     * @param id      an integer that identifies the event.
     */
    public AlgorithmEvent(Object source, int id) {
	super(source);
	this.id = id;
    }
    
    /**
     * Constructs an <code>AlgorithmEvent</code> object.
     *
     * @param source  the object that originated the event.
     * @param id      an integer that identifies the event.
     * @param value   an integer that specifies meaningful int value.
     */
    public AlgorithmEvent(Object source, int id, int value) {
	this(source, id);
	this.intValue = value;
    }
    
    /**
     * Constructs an <code>AlgorithmEvent</code> object.
     *
     * @param source  the object that originated the event.
     * @param id      an integer that identifies the event.
     * @param value   an integer that specifies meaningful int value.
     * @param description the description of this event.
     */
    public AlgorithmEvent(Object source, int id, int value, String description) {
	this(source, id, value);
	this.description = description;
    }
    
    /**
     * Constructs an <code>AlgorithmEvent</code> object.
     *
     * @param source  the object that originated the event.
     * @param id      an integer that identifies the event.
     * @param intValue an integer that specifies meaningful int value.
     * @param floatValue a float that specifies meaningful float value.
     * @param description the description of this event.
     */
    public AlgorithmEvent(Object source, int id, int intValue, float floatValue, String description) {
	this(source, id, intValue, description);
	this.floatValue = floatValue;
    }
    
    /**
     * Returns the event id.
     */
    public int getId() {
	return id;
    }
    
    /**
     * Sets the event id.
     * @param id an integer that identifies the event.
     */
    public void setId(int id) {
	this.id = id;
    }
    
    /**
     * Returns meaningful integer value.
     */
    public int getIntValue() {
	return intValue;
    }
    
    /**
     * Sets meaningful integer value.
     * @param value an integer that specifies meaningful value.
     */
    public void setIntValue(int value) {
	this.intValue = value;
    }
    
    /**
     * Returns meaningful float value.
     */
    public float getFloatValue() {
	return floatValue;
    }
    
    /**
     * Sets meaningful float value.
     * @param value a float that specifies meaningful value.
     */
    public void setFloatValue(float value) {
	this.floatValue = value;
    }
    
    /**
     * Returns the event description.
     */
    public String getDescription() {
	return description;
    }
    
    /**
     * Sets the event description.
     * @param description the event description.
     */
    public void setDescription(String description) {
	this.description = description;
    }
}
