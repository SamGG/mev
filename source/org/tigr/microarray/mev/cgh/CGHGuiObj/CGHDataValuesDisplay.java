/*******************************************************************************
 * Copyright (c) 1999-2005 The Institute for Genomic Research (TIGR).
 * Copyright (c) 2005-2008, the Dana-Farber Cancer Institute (DFCI), 
 * J. Craig Venter Institute (JCVI) and the University of Washington.
 * All rights reserved.
 *******************************************************************************/
/*
 * CGHDataValuesDisplay.java
 *
 * Created on March 27, 2003, 2:37 PM
 */

package org.tigr.microarray.mev.cgh.CGHGuiObj;

//import javax.swing.text.html.HTMLDocument;
import org.tigr.microarray.mev.cgh.CGHDataObj.CGHClone;
import org.tigr.microarray.mev.cgh.CGHDataObj.CGHDataRegionInfo;
import org.tigr.microarray.mev.cgh.CGHDataObj.FlankingRegion;
import org.tigr.microarray.mev.cgh.CGHDataObj.ICGHDataRegion;
import org.tigr.microarray.mev.cluster.gui.IData;

/**
 *
 * @author  Adam Margolin
 * @author Raktim Sinha
 */

public class CGHDataValuesDisplay extends javax.swing.JDialog {
    CGHDataRegionInfo dataRegionInfo;
    IData data;

    /** Creates new form CGHDataValuesDisplay */
    public CGHDataValuesDisplay(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Data Region Values");
        pneInfo.setContentType("text/html");
        pneInfo.setEditable(false);
        setSize(400, 400);
        org.tigr.microarray.mev.cgh.CGHGuiObj.GuiUtil.GuiUtil.center(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        pneInfo = new javax.swing.JEditorPane();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jScrollPane1.setViewportView(pneInfo);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    /** Getter for property dataRegionInfo.
     * @return Value of property dataRegionInfo.
     */
    public CGHDataRegionInfo getDataRegionInfo() {
        return dataRegionInfo;
    }

    /** Setter for property dataRegionInfo.
     * @param dataRegionInfo New value of property dataRegionInfo.
     */
    public void setDataRegionInfo(CGHDataRegionInfo dataRegionInfo) {
        this.dataRegionInfo = dataRegionInfo;

    }
    public void createTextDocument(){
        pneInfo.setText(createDocument());
    }

    private String createDocument(){

        String retVal;

        int experimentIndex = dataRegionInfo.getExperimentIndex();
        ICGHDataRegion dataRegion = dataRegionInfo.getDataRegion();

        retVal = "Experiment " + data.getSampleName(experimentIndex) + "<br>";
        retVal += "Chromosome " + (dataRegion.getChromosomeIndex() + 1) + "<br>";
        retVal += "Start " + dataRegion.getStart() + "<br>";
        retVal += "Stop " + dataRegion.getStop() + "<br><br>";

        if(dataRegion instanceof FlankingRegion){
            CGHClone startClone = ((FlankingRegion)dataRegion).getStartClone();
            CGHClone stopClone = ((FlankingRegion)dataRegion).getStopClone();
            int startCloneIndex = data.getClones().indexOf(startClone);
            int stopCloneIndex = data.getClones().indexOf(stopClone);
            for(int index = startCloneIndex; index <= stopCloneIndex; index++){
                retVal += getCloneString(data.getCloneAt(index), experimentIndex);
            }
        }else if(dataRegion instanceof CGHClone){
            retVal += getCloneString((CGHClone) dataRegion, experimentIndex);
        }
        return retVal;
    }

    private String getCloneString(CGHClone clone, int experimentIndex){
        String retVal = "";
        int cloneIndex = data.getClones().indexOf(clone);

        retVal += "<b>" + clone.getName() + "</b><br>";
        /*
         * Old method of data structure access.
        Object obj = data.getFeaturesList().get(experimentIndex);
        if(obj instanceof CGHSampleData){
            retVal += createSampleDataString((CGHSampleData)obj, cloneIndex);
        }else if(obj instanceof CGHSlideData){
            retVal += createSlideDataString((CGHSlideData)obj, cloneIndex);
        }
        */
        /**
         * Remember getRatio Glitch
         * Modified for MeV struct
         * Raktim
         */
        retVal += "<i>Cy3 Value</i><br>";
        retVal += getTab() + data.getCY3(experimentIndex, cloneIndex) + "<br>";
        retVal += "<i>Cy5 Value</i><br>";
        retVal += getTab() + data.getCY5(experimentIndex, cloneIndex) + "<br>";
        retVal += getTab() + "<i>Ratio: " + data.getRatio(experimentIndex, cloneIndex, IData.LOG) + "</i><br>";
        retVal += "<br>";
        return retVal;
    }

    /**
     * Old Data Struct Funtion. not Used
    private String createSampleDataString(CGHSampleData sampleData, int cloneIndex){
        String retVal = "";
        retVal += "<i>Cy 3 Vals</i><br>";

        Vector cy3Slides = sampleData.getCy3Slides();

        if(cy3Slides != null){
            Iterator cy3It = cy3Slides.iterator();
            while(cy3It.hasNext()){
                CGHSlideData slideData = (CGHSlideData)cy3It.next();
                retVal += createSlideDataString(slideData, cloneIndex);
            }
            retVal += "<br>";
        }

        retVal += "<i>Cy 5 Vals</i><br>";
        Vector cy5Slides = sampleData.getCy5Slides();

        if(cy5Slides != null){
            Iterator cy5It = cy5Slides.iterator();
            while(cy5It.hasNext()){
                CGHSlideData slideData = (CGHSlideData)cy5It.next();
                retVal += createSlideDataString(slideData, cloneIndex);
            }
            retVal += "<br><br>";
        }
        return retVal;
    }
    */

    /**
     * Old Data Struct Funtion. not Used
    private String createSlideDataString(CGHSlideData slideData, int cloneIndex){
        String retVal = "";
        retVal += "Slide " + slideData.getSlideDataName() + "<br>";
        if(cloneIndex < slideData.size()){
            CGHCloneSlideData cloneSlideData = (CGHCloneSlideData)slideData.elementAt(cloneIndex);
            if(cloneSlideData != null){
                Vector slideDataElements = cloneSlideData.getSlideDataElements();
                if(slideDataElements.size() > 0){

                    Iterator elementsIt = slideDataElements.iterator();
                    while(elementsIt.hasNext()){
                        float ratio = ((CGHSlideDataElement)elementsIt.next()).getRatio();
                        retVal += getTab() + ratio + "<br>";
                    }
                }
            }
        }
        retVal += getTab() + "<i>Mean: " + slideData.getRatio(cloneIndex) + "</i><br>";
        return retVal;
    }
    */

    private String getTab(){
        return "&nbsp;&nbsp;&nbsp;";
    }

    /** Getter for property data.
     * @return Value of property data.
     */
    public IData getData() {
        return data;
    }

    /** Setter for property data.
     * @param data New value of property data.
     */
    public void setData(IData data) {
        this.data = data;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JEditorPane pneInfo;
    // End of variables declaration//GEN-END:variables

}
