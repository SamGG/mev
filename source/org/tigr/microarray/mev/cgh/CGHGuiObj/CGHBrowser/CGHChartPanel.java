/*******************************************************************************
 * Copyright (c) 1999-2005 The Institute for Genomic Research (TIGR).
 * Copyright (c) 2005-2008, the Dana-Farber Cancer Institute (DFCI), 
 * J. Craig Venter Institute (JCVI) and the University of Washington.
 * All rights reserved.
 *******************************************************************************/
/*
 * CGHChartPanel.java
 *
 * Created on March 26, 2003, 1:57 PM
 */

package org.tigr.microarray.mev.cgh.CGHGuiObj.CGHBrowser;

import java.awt.event.InputEvent;

import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.tigr.microarray.mev.cgh.CGHDataModel.CGHBrowserModelAdaptor;
import org.tigr.microarray.mev.cgh.CGHDataModel.CGHChartDataModel;
import org.tigr.microarray.mev.cgh.CGHDataModel.CGHTableDataModel;
import org.tigr.microarray.mev.cgh.CGHDataObj.CGHClone;
import org.tigr.microarray.mev.cgh.CGHDataObj.FlankingRegion;
import org.tigr.microarray.mev.cgh.CGHDataObj.ICGHDataRegion;

import com.klg.jclass.chart.ChartDataViewSeries;
import com.klg.jclass.chart.ChartText;
import com.klg.jclass.chart.EventTrigger;
import com.klg.jclass.chart.JCAxis;
import com.klg.jclass.chart.JCDataIndex;
import com.klg.jclass.chart.JCPickListener;
import com.klg.jclass.util.legend.JCLegend;

/**
 *
 * @author  Adam Margolin
 * @author Raktim Sinha
 */

public class CGHChartPanel extends javax.swing.JPanel implements JCPickListener{

    private int experimentIndex;
    private int chromosomeIndex;

    private CGHChartDataModel chartModel;
    private CGHTableDataModel tableModel;

    private ICGHDataRegion selectedRegion = null;

    CGHBrowserModelAdaptor browserModel;

    public CGHChartPanel(int experimentIndex, int chromosomeIndex, CGHBrowserModelAdaptor browserModel){
        this.browserModel = browserModel;
        this.experimentIndex = experimentIndex;
        this.chromosomeIndex = chromosomeIndex;
        initComponents();
        initCustomComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        chart = new CGHPaintableChart();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        chart.setBackground(java.awt.Color.white);
        chart.setXAxisAnnotationMethod(com.klg.jclass.chart.JCAxis.VALUE_LABELS);
        chart.setYAxisGridVisible(true);
        //chart.setYAxisMinMax("-1,3");
        chart.setYAxisMinMax("-4,4");
        jSplitPane1.setLeftComponent(chart);

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblData);

        jSplitPane1.setRightComponent(jScrollPane1);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void initCustomComponents(){
        //chartModel = new CGHChartDataModel(experimentSet, experimentIndex, chromosomeIndex);
        //tableModel = new CGHTableDataModel(experimentSet, experimentIndex, chromosomeIndex);

        //chart.getDataView(0).setDataSource(chartModel);
        initTable();
        initChart();
    }



    private void initChart(){
        setPointSize(3);

        chart.setFont(new java.awt.Font("Dialog.bold", 1, 10));
        chart.getChartArea().getXAxis(0).setAnnotationRotation(JCAxis.ROTATE_270);
        chart.getDataView(0).getYAxis().getTitle().setRotation(ChartText.DEG_270);
        chart.getDataView(0).getYAxis().getTitle().setPlacement(JCLegend.WEST);
        chart.setTrigger(0, new EventTrigger(InputEvent.BUTTON1_MASK, EventTrigger.PICK));
        chart.setTrigger(1, new EventTrigger(InputEvent.SHIFT_MASK, EventTrigger.ZOOM));
        chart.setTrigger(2, new EventTrigger(InputEvent.CTRL_MASK, EventTrigger.TRANSLATE));
        chart.addPickListener(this);

        chart.getDataView(0).getYAxis().setEditable(false);
    }

    public void setPointSize(int size){
        java.util.List seriesList = chart.getDataView(0).getSeries();
        for (java.util.Iterator it = seriesList.iterator(); it.hasNext(); ) {
            ((ChartDataViewSeries)it.next()).getStyle().setSymbolSize(size);
        }
    }

    private void initTable(){
        //tblData.setModel(tableModel);
        tblData.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        ListSelectionModel rowSM = tblData.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) return;

                ListSelectionModel lsm =
                (ListSelectionModel)e.getSource();
                if (lsm.isSelectionEmpty()) {
                } else {
                    int selectedStartRow = lsm.getMinSelectionIndex();
                    int selectedStopRow = lsm.getMaxSelectionIndex();

                    if(selectedStartRow == selectedStopRow){
                        highlightChartData(selectedStartRow);
                    }else{
                        highlightChartData(selectedStartRow - 1, selectedStopRow + 1);
                    }
                }
            }
        });

    }

    public void highlightChartData(int dataIndex){
        ((CGHPaintableChart)chart).setSelectedCoordinates(dataIndex);
    }

    public void highlightChartData(int startIndex, int stopIndex){
        if(startIndex < 0){
            startIndex = 0;
        }

        if(stopIndex > chartModel.getSeriesSize() - 1){
            stopIndex = chartModel.getSeriesSize() - 1;
        }
        ((CGHPaintableChart)chart).setSelectedCoordinates(startIndex, stopIndex);
    }

    public void deleteHighlightedRect(){
        this.selectedRegion = null;
        ((CGHPaintableChart)chart).deleteRect();
    }

    public void smoothUnconfirmed(boolean smooth){
        chartModel.smoothUnconfirmed(smooth);
    }

    public void setShowLegend(boolean show){
        chart.setLegendVisible(show);
    }

    public void setChromosomeIndex(int chromaIndex){
        this.chromosomeIndex = chromaIndex;
        browserModel.setChromosomeIndex(chromaIndex);
        deleteHighlightedRect();
    }

    public void setExperimentIndex(int expIndex){
    	//Raktim
    	//System.out.println("CGHChartPanel.setExperiment expIndex value: " + expIndex);
        this.experimentIndex = expIndex;
        browserModel.setExperimentIndex(expIndex);
        deleteHighlightedRect();
    }

    public void setChartType(int chartType){
        chart.setChartType(chartType);
    }

    public void setXAxisPositionsByLinearOrder(){
        chartModel.setXAxisPositions(CGHChartDataModel.LINEAR_ORDER );
        chart.repaint();
    }

    public void setXAxisPositionsByChromLocation(){
        chartModel.setXAxisPositions(CGHChartDataModel.CHROM_LOCATION);
        chart.repaint();
    }

    public void setXAxisLabelsByValue(){
        chart.setXAxisAnnotationMethod(JCAxis.VALUE);
    }

    public void setXAxisLabelsByClone(){
        chart.setXAxisAnnotationMethod(JCAxis.POINT_LABELS);

    }

    public void setXAxisLabelsNone(){
        chart.setXAxisAnnotationMethod(JCAxis.VALUE_LABELS);
    }

    private void updateSelection(){
        if(selectedRegion != null){
            setSelectedRegion(selectedRegion);
        }else{
            chart.repaint();
        }
    }

    public void setChartDisplayRange(float min, float max){
        String range = min + "," + max;
        chart.setYAxisMinMax(range);
    }

    public void pick(com.klg.jclass.chart.JCPickEvent jCPickEvent) {
        JCDataIndex di = jCPickEvent.getPickResult();
        if(di != null){
            int point = di.getPoint();
            int series = di.getSeriesIndex();

            tblData.setRowSelectionInterval(point, point);
            tblData.scrollRectToVisible(tblData.getCellRect(point, 0, false));
        }
    }


    public void setSelectedRegion(ICGHDataRegion selectedRegion){
        this.selectedRegion = selectedRegion;
        if(selectedRegion instanceof CGHClone){
            setSelectedClone( (CGHClone)selectedRegion);
        }else if(selectedRegion instanceof FlankingRegion){
            setSelectedFlankingRegion( (FlankingRegion)selectedRegion);
        }
    }

    public void setSelectedClone(CGHClone selectedClone){

        int selectionIndex = chartModel.getCloneIndex(selectedClone);
        tblData.setRowSelectionInterval(selectionIndex, selectionIndex);
        tblData.scrollRectToVisible(tblData.getCellRect(selectionIndex, 0, false));
    }

    public void setSelectedFlankingRegion(FlankingRegion selectedFlankingRegion){
        //Plus and minus one a bit convoluted

        //int startCloneIndex = data.getClones().indexOf(selectedFlankingRegion.getStartClone() ) + 1;
        //int stopCloneIndex = data.getClones().indexOf(selectedFlankingRegion.getStopClone() ) - 1;

        //int startIndex = chartModel.getIndexOf(relativeStartIndex);
        //int stopIndex = chartModel.getIndexOf(relativeStopIndex);

        //int startIndex = chartModel.getCloneIndex(selectedFlankingRegion.getStartClone()) + 1;
        //int stopIndex = chartModel.getCloneIndex(selectedFlankingRegion.getStopClone()) - 1;
        CGHClone startClone = selectedFlankingRegion.getStartClone();
        if(startClone == null){
            startClone = chartModel.getCloneByPosition(selectedFlankingRegion.getStart());
        }

        CGHClone stopClone = selectedFlankingRegion.getStopClone();
        if(stopClone == null){
            stopClone = chartModel.getCloneByPosition(selectedFlankingRegion.getStop());
        }

        if(startClone == null || stopClone == null){
            return;
        }

        int startIndex = chartModel.getStartCloneIndex(startClone);
        int stopIndex = chartModel.getStopCloneIndex(stopClone);

        tblData.setRowSelectionInterval(startIndex, stopIndex);
        tblData.scrollRectToVisible(tblData.getCellRect(startIndex, 0, false));
    }



    /** Getter for property chartModel.
     * @return Value of property chartModel.
     */
    public CGHChartDataModel getChartModel() {
        return chartModel;
    }

    /** Setter for property chartModel.
     * @param chartModel New value of property chartModel.
     */
    public void setChartModel(CGHChartDataModel chartModel) {
        this.chartModel = chartModel;
        chart.getDataView(0).setDataSource(chartModel);
    }

    /** Getter for property tableModel.
     * @return Value of property tableModel.
     */
    public CGHTableDataModel getTableModel() {
        return tableModel;
    }

    /** Setter for property tableModel.
     * @param tableModel New value of property tableModel.
     */
    public void setTableModel(CGHTableDataModel tableModel) {
        this.tableModel = tableModel;
        tblData.setModel(tableModel);
    }

    public void setCloneValuesByPScore(){
        int startRow = tblData.getSelectionModel().getMinSelectionIndex();
        int stopRow = tblData.getSelectionModel().getMaxSelectionIndex();
        browserModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_P_SCORE);

        //System.out.println("set start " + startRow + " stop " + stopRow);
        tblData.setRowSelectionInterval(startRow, stopRow);
        //chartModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_P_SCORE);
        //tableModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_P_SCORE);
        //chart.setYAxisMinMax("0,1.5");
    }

    public void setCloneValuesByDyeSwap(){
        int startRow = tblData.getSelectionModel().getMinSelectionIndex();
        int stopRow = tblData.getSelectionModel().getMaxSelectionIndex();
        browserModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_DYE_SWAP);
        tblData.setRowSelectionInterval(startRow, stopRow);
        //chartModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_DYE_SWAP);
        //tableModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_DYE_SWAP);
        //chart.setYAxisMinMax("-1,3");
    }

    public void setCloneValuesByLogAverageInverted(){
        int startRow = tblData.getSelectionModel().getMinSelectionIndex();
        int stopRow = tblData.getSelectionModel().getMaxSelectionIndex();
        browserModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_LOG_AVERAGE_INVERTED);
        tblData.setRowSelectionInterval(startRow, stopRow);
        //chartModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_LOG_AVERAGE_INVERTED);
        //tableModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_LOG_AVERAGE_INVERTED);
    }

    public void setCloneValuesByLogDyeSwap(){
        int startRow = tblData.getSelectionModel().getMinSelectionIndex();
        int stopRow = tblData.getSelectionModel().getMaxSelectionIndex();

        browserModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_LOG_DYE_SWAP);

        tblData.setRowSelectionInterval(startRow, stopRow);

        //chartModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_LOG_DYE_SWAP);
        //tableModel.setCloneValueType(CGHBrowserModelAdaptor.CLONE_VALUES_LOG_DYE_SWAP);
    }

    /** Getter for property chart.
     * @return Value of property chart.
     */
    public com.klg.jclass.chart.beans.SimpleChart getChart() {
        return chart;
    }

    /** Setter for property chart.
     * @param chart New value of property chart.
     */
    public void setChart(com.klg.jclass.chart.beans.SimpleChart chart) {
        this.chart = chart;
    }

    /** Getter for property tblData.
     * @return Value of property tblData.
     */
    public javax.swing.JTable getTblData() {
        return tblData;
    }

    /** Setter for property tblData.
     * @param tblData New value of property tblData.
     */
    public void setTblData(javax.swing.JTable tblData) {
        this.tblData = tblData;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private com.klg.jclass.chart.beans.SimpleChart chart;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables

}
